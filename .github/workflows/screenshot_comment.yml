name: Screenshot Comment

on:
  workflow_run:
    workflows:
      - Screenshots
    types:
      - completed

jobs:
  on-success:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    steps:
      - name: 'Download artifact'
        uses: actions/github-script@v6
        with:
          script: |
            let allArtifacts = await github.rest.actions.listWorkflowRunArtifacts({
               owner: context.repo.owner,
               repo: context.repo.repo,
               run_id: context.payload.workflow_run.id,
            });
            let prArtifact = allArtifacts.data.artifacts.filter((artifact) => {
              return artifact.name == "pr_number"
            })[0];
            let shaArtifact = allArtifacts.data.artifacts.filter((artifact) => {
              return artifact.name == "sha"
            })[0];
            let urlArtifact = allArtifacts.data.artifacts.filter((artifact) => {
              return artifact.name == "url"
            })[0];
            let prDownload = await github.rest.actions.downloadArtifact({
               owner: context.repo.owner,
               repo: context.repo.repo,
               artifact_id: prArtifact.id,
               archive_format: 'zip',
            });
            let shaDownload = await github.rest.actions.downloadArtifact({
               owner: context.repo.owner,
               repo: context.repo.repo,
               artifact_id: shaArtifact.id,
               archive_format: 'zip',
            });
            let urlDownload = await github.rest.actions.downloadArtifact({
               owner: context.repo.owner,
               repo: context.repo.repo,
               artifact_id: urlArtifact.id,
               archive_format: 'zip',
            });
            let fs = require('fs');
            fs.writeFileSync(`${process.env.GITHUB_WORKSPACE}/pr_number.zip`, Buffer.from(prDownload.data));
            fs.writeFileSync(`${process.env.GITHUB_WORKSPACE}/sha.zip`, Buffer.from(shaDownload.data));
            fs.writeFileSync(`${process.env.GITHUB_WORKSPACE}/url.zip`, Buffer.from(urlDownload.data));

      - name: 'Unzip artifact PR'
        run: unzip pr_number.zip

      - name: 'Unzip artifact SHA'
        run: unzip sha.zip

      - name: 'Unzip artifact URL'
        run: unzip url.zip

      - uses: actions/github-script@v6
        id: get-pr
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          result-encoding: string
          script: |
            let fs = require('fs');
            return Number(fs.readFileSync('./pr_number'));

      - uses: actions/github-script@v6
        id: get-sha
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          result-encoding: string
          script: |
            let fs = require('fs');
            return String(fs.readFileSync('./sha'));

      - uses: actions/github-script@v6
        id: get-url
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          result-encoding: string
          script: |
            let fs = require('fs');
            return String(fs.readFileSync('./url'));

      - name: Find comment to update
        uses: peter-evans/find-comment@v2
        id: find-comment
        with:
          issue-number: ${{ steps.get-pr.outputs.result }}
          comment-author: 'github-actions[bot]'
          body-includes: You can download the generated screenshots from the workflow artifacts.

      - name: Create comment
        if: steps.find-comment.outputs.comment-id == ''
        uses: peter-evans/create-or-update-comment@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ steps.get-pr.outputs.result }}
          body: |
            üñºÔ∏è **Screenshots created**

            You can download the generated screenshots from the workflow artifacts.

            _Please note that artifacts are only available for download for ${{ github.retention_days }} days._

            - Generated screenshots for ${{ steps.get-sha.outputs.result }} at $(date) ([download](${{ steps.get-url.outputs.result }})).

      - name: Update comment
        if: steps.find-comment.outputs.comment-id != ''
        uses: peter-evans/create-or-update-comment@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          comment-id: ${{ steps.find-comment.outputs.comment-id }}
          body: |
            - Generated screenshots for ${{ github.event.client_payload.sha }} at $(date) ([download](${{ steps.get-url.outputs.result }})).
